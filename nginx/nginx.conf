events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    upstream old_frontend {
        server old_app_frontend:3000;
    }

    upstream new_frontend {
        server new_app_frontend:3000;
    }

    upstream old_backend {
        server old_app_backend:8000;
    }

    upstream new_backend {
        server new_app_backend:8001;
    }

    server {
        listen 80;
        server_name _;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name _;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Old App
        location /old {
            proxy_pass http://old_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Handle React Router
            try_files $uri $uri/ /old/index.html;
            
            # Remove /old prefix when proxying to the frontend
            rewrite ^/old/?(.*)$ /$1 break;
        }

        location /old/static {
            rewrite ^/old/static/(.*) /static/$1 break;
            proxy_pass http://old_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /old/api {
            rewrite ^/old/api/?(.*)$ /$1 break;
            proxy_pass http://old_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # New App
        location /new {
            proxy_pass http://new_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Handle React Router
            try_files $uri $uri/ /new/index.html;
            
            # Remove /new prefix when proxying to the frontend
            rewrite ^/new/?(.*)$ /$1 break;
        }

        location /new/static {
            rewrite ^/new/static/(.*) /static/$1 break;
            proxy_pass http://new_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /new/api {
            rewrite ^/new/api/?(.*)$ /$1 break;
            proxy_pass http://new_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
} 